{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\nimport {ChainId} from \"@uniswap/sdk-core\";\r\n\r\nexport const FACTORY_ADDRESS: {[key: number]: string} = {\r\n    // [ChainId.EVMOS]: '0x1279aF64A33138792395B16832F9C0fa6F068FCa',\r\n    [ChainId.EVMOS_TESTNET]: '0x1279aF64A33138792395B16832F9C0fa6F068FCa',\r\n    [ChainId.ZKSYNC_TESTNET]: '0x59E5Dd8C2252250d643D010ba438327e7c430FA3',\r\n} // Tyche Factory on TestNet of EVMOS\r\n\r\nexport const INIT_CODE_HASH = '0xd1c22c9265a6b299435d450062fe36d684a63bd3c86362640d444d20b3f90701'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import { BigintIsh, ChainId, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH\r\n  )\r\n}\r\nexport class Pair {\r\n  public liquidityToken: Token\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS[tokenA.chainId], tokenA, tokenB })\r\n  }\r\n\r\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\r\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [currencyAmountA, tokenAmountB]\r\n      : [tokenAmountB, currencyAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].currency.chainId,\r\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\r\n      18,\r\n      'TCHLP',\r\n      'Tyche LPs'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId | number {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency)\r\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency)\r\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId, Currency, Price, Token, wrappedCurrency } from '@uniswap/sdk-core'\r\n\r\nimport { Pair } from './pair'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: ChainId | number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = wrappedCurrency(input, chainId)\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(\r\n      typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(wrappedCurrency(output, chainId)),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): ChainId | number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import {\r\n  ChainId,\r\n  Currency,\r\n  CurrencyAmount,\r\n  currencyEquals,\r\n  Fraction,\r\n  Percent,\r\n  Price,\r\n  sortedInsert,\r\n  wrappedCurrency,\r\n  TradeType,\r\n  wrappedCurrencyAmount,\r\n  computePriceImpact,\r\n  Token\r\n} from '@uniswap/sdk-core'\r\nimport { ONE, ZERO } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      tokenAmounts[0] = wrappedCurrencyAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = wrappedCurrencyAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\r\n        .quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined = nextAmountIn.currency.isToken\r\n      ? nextAmountIn.currency.chainId\r\n      : currencyOut.isToken\r\n      ? (currencyOut as Token).chainId\r\n      : undefined\r\n\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedCurrencyAmount(nextAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!currencyEquals(pair.token0, amountIn.currency) && !currencyEquals(pair.token1, amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (currencyEquals(amountOut.currency, tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined = nextAmountOut.currency.isToken\r\n      ? nextAmountOut.currency.chainId\r\n      : currencyIn.isToken\r\n      ? (currencyIn as Token).chainId\r\n      : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedCurrencyAmount(nextAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!currencyEquals(pair.token0, amountOut.currency) && !currencyEquals(pair.token1, amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (currencyEquals(amountIn.currency, tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress, Token } from '@uniswap/sdk-core'\r\nimport { Trade } from 'entities'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isEther\r\n    const etherOut = trade.outputAmount.currency.isEther\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n"],"names":["FACTORY_ADDRESS","_FACTORY_ADDRESS","ChainId","EVMOS_TESTNET","ZKSYNC_TESTNET","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","_proto","involvesToken","token","equals","priceOf","process","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrappedCurrency","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","wrappedCurrencyAmount","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","isToken","undefined","tokenOut","_pair$getOutputAmount2","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isEther","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":"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"}