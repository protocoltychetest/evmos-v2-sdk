{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport {ChainId} from \"@uniswap/sdk-core\";\n\nexport const FACTORY_ADDRESS: {[key: number]: string} = {\n    // [ChainId.EVMOS]: '0x1279aF64A33138792395B16832F9C0fa6F068FCa',\n    [ChainId.EVMOS_TESTNET]: '0x1279aF64A33138792395B16832F9C0fa6F068FCa',\n    [ChainId.ZKSYNC_TESTNET]: '0x59E5Dd8C2252250d643D010ba438327e7c430FA3',\n} // Tyche Factory on TestNet of EVMOS\n\nexport const INIT_CODE_HASH = '0xd1c22c9265a6b299435d450062fe36d684a63bd3c86362640d444d20b3f90701'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, ChainId, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS[tokenA.chainId], tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'TCHLP',\n      'Tyche LPs'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, Currency, Price, Token, wrappedCurrency } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: ChainId | number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = wrappedCurrency(input, chainId)\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(\n      typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(wrappedCurrency(output, chainId)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  wrappedCurrency,\n  TradeType,\n  wrappedCurrencyAmount,\n  computePriceImpact,\n  Token\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      tokenAmounts[0] = wrappedCurrencyAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = wrappedCurrencyAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = nextAmountIn.currency.isToken\n      ? nextAmountIn.currency.chainId\n      : currencyOut.isToken\n      ? (currencyOut as Token).chainId\n      : undefined\n\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedCurrencyAmount(nextAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountIn.currency) && !currencyEquals(pair.token1, amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (currencyEquals(amountOut.currency, tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = nextAmountOut.currency.isToken\n      ? nextAmountOut.currency.chainId\n      : currencyIn.isToken\n      ? (currencyIn as Token).chainId\n      : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedCurrencyAmount(nextAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!currencyEquals(pair.token0, amountOut.currency) && !currencyEquals(pair.token1, amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (currencyEquals(amountIn.currency, tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress, Token } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isEther\n    const etherOut = trade.outputAmount.currency.isEther\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","_FACTORY_ADDRESS","ChainId","EVMOS_TESTNET","ZKSYNC_TESTNET","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","this","liquidityToken","Token","chainId","getAddress","_proto","involvesToken","token","equals","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrappedCurrency","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","wrappedCurrencyAmount","i","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","isToken","undefined","tokenOut","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isEther","etherOut","ttl","methodName","args","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}