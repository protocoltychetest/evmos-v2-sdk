{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\nimport {ChainId} from \"@uniswap/sdk-core\";\r\n\r\nexport const FACTORY_ADDRESS: {[key: number]: string} = {\r\n    // [ChainId.EVMOS]: '0x1279aF64A33138792395B16832F9C0fa6F068FCa',\r\n    [ChainId.EVMOS_TESTNET]: '0x1279aF64A33138792395B16832F9C0fa6F068FCa',\r\n    [ChainId.ZKSYNC_TESTNET]: '0x59E5Dd8C2252250d643D010ba438327e7c430FA3',\r\n} // Tyche Factory on TestNet of EVMOS\r\n\r\nexport const INIT_CODE_HASH = '0xd1c22c9265a6b299435d450062fe36d684a63bd3c86362640d444d20b3f90701'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import { BigintIsh, ChainId, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH\r\n  )\r\n}\r\nexport class Pair {\r\n  public liquidityToken: Token\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS[tokenA.chainId], tokenA, tokenB })\r\n  }\r\n\r\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\r\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [currencyAmountA, tokenAmountB]\r\n      : [tokenAmountB, currencyAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].currency.chainId,\r\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\r\n      18,\r\n      'TCHLP',\r\n      'Tyche LPs'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId | number {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency)\r\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency)\r\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId, Currency, Price, Token, wrappedCurrency } from '@uniswap/sdk-core'\r\n\r\nimport { Pair } from './pair'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: ChainId | number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = wrappedCurrency(input, chainId)\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(\r\n      typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(wrappedCurrency(output, chainId)),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): ChainId | number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import {\r\n  ChainId,\r\n  Currency,\r\n  CurrencyAmount,\r\n  currencyEquals,\r\n  Fraction,\r\n  Percent,\r\n  Price,\r\n  sortedInsert,\r\n  wrappedCurrency,\r\n  TradeType,\r\n  wrappedCurrencyAmount,\r\n  computePriceImpact,\r\n  Token\r\n} from '@uniswap/sdk-core'\r\nimport { ONE, ZERO } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      tokenAmounts[0] = wrappedCurrencyAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = wrappedCurrencyAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\r\n        .quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined = nextAmountIn.currency.isToken\r\n      ? nextAmountIn.currency.chainId\r\n      : currencyOut.isToken\r\n      ? (currencyOut as Token).chainId\r\n      : undefined\r\n\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedCurrencyAmount(nextAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!currencyEquals(pair.token0, amountIn.currency) && !currencyEquals(pair.token1, amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (currencyEquals(amountOut.currency, tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined = nextAmountOut.currency.isToken\r\n      ? nextAmountOut.currency.chainId\r\n      : currencyIn.isToken\r\n      ? (currencyIn as Token).chainId\r\n      : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedCurrencyAmount(nextAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!currencyEquals(pair.token0, amountOut.currency) && !currencyEquals(pair.token1, amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (currencyEquals(amountIn.currency, tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress, Token } from '@uniswap/sdk-core'\r\nimport { Trade } from 'entities'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isEther\r\n    const etherOut = trade.outputAmount.currency.isEther\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n"],"names":["FACTORY_ADDRESS","_FACTORY_ADDRESS","ChainId","EVMOS_TESTNET","ZKSYNC_TESTNET","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","this","liquidityToken","Token","chainId","getAddress","_proto","involvesToken","token","equals","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrappedCurrency","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","wrappedCurrencyAmount","i","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","isToken","undefined","tokenOut","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isEther","etherOut","ttl","methodName","args","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}